
spring.application.name=currency-exchange
server.port=8000
#Change k8s
#spring.config.import=optional:configserver:http://localhost:8888


spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.show-sql=true
spring.h2.console.enable=true
#To allow data.sql to populate the database's tables after creation:
spring.jpa.defer-datasource-initialization=true

#serviceUrl.defaultZone property specifies the URL of the Eureka server that the client should connect to.
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#This property will disable the Eureka client entirely, preventing your
# microservice from attempting to register with the Eureka server.
#eureka.client.enabled=false



#maxAttempts is the total number of attempts, including the first failed call.
#That means maxAttempts=5 results in 5 calls, if every call fails.
resilience4j.retry.instances.sample-api.maxAttempts=5
resilience4j.retry.instances.sample-api.waitDuration=2s



#Almost doubling the waiting time for retry
#resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#Giving retry a higher priority than circuit breaker
#resilience4j.retry.retryAspectOrder=2
#resilience4j.circuitbreaker.circuitBreakerAspectOrder=1


#How many requests to allow in the period:
resilience4j.ratelimiter.instances.default.limitForPeriod=2
#What is the period?
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s


#Max concurrent requests
resilience4j.bulkhead.instances.default.maxConcurrentCalls=1


#Configuring the percentage
management.tracing.sampling.probability=1.0

#Configuring logging pattern:
logging.pattern.level=%5p [${spring.application.name:}, %X{traceId:-},%X{spanId:-}]

#CHANGE K8S (health information must be known to k8s)
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

